using Hatsukoi.Service.Interface;
using Hatsukoi.Service;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Hatsukoi.Models;
using Hatsukoi.Models.Dtos.OrderDto;
using Microsoft.AspNetCore.Authorization;

namespace Hatsukoi.APIControllers
{
    [Route("api/[controller]/[action]")]
    [Authorize]
    [ApiController]
    public class OrderController : ControllerBase
    {
        private readonly OrderService _orderService;
        private readonly IAccountService _iAccountService;

        public OrderController(OrderService orderService, IAccountService iAccountService)
        {
            _orderService = orderService;
            _iAccountService = iAccountService;
        }

        [HttpGet]
        public IActionResult GetOrderList()
        {
            var userId = _iAccountService.GetUser().Id;
            var sellerId = _orderService.GetSellerIdByUserId(userId);
            var orders = _orderService.GetOrdersBySeller(sellerId);

            return Ok(new APIBaseResponse { 
                Status = APIStatus.Success,
                ErrorMsg = string.Empty,
                Result = orders 
            });
        }

        [HttpPost]
        public IActionResult CancelOrder(CancelOrderDto dto)
        {
            try
            {
                _orderService.CancelOrderByOrderNumber(dto.orderNum,dto.cancelReason);
                return Ok(new APIBaseResponse()
                {
                    Status = APIStatus.Success
                });
            }
            catch(Exception ex)
            {
                return Ok(new APIBaseResponse
                {
                    Status = APIStatus.Fail,
                    ErrorMsg = ex.Message,
                    //Result = new List<string>()
                });
            }
        }
        [HttpPost]
        public IActionResult ShipOrder(ShipOrderNumDto dto)
        {
            try
            {
                _orderService.ShipOrderByOrderNumber(dto.orderNum);
                return Ok(new APIBaseResponse()
                {
                    Status = APIStatus.Success
                });
            }
            catch
            {
                return Ok(new APIBaseResponse
                {
                    Status = APIStatus.Fail,
                    ErrorMsg = "傳遞資料發生錯誤"
                });
            }
           
        }
        [HttpPost]
        public IActionResult ShipOrders(ShipOrdersDto dto)
        {
            try
            {
                for (int i = 0; i < dto.orderNums.Count; i++)
                {
                    _orderService.ShipOrderByOrderNumber(dto.orderNums[i]);
                }
                return Ok(new APIBaseResponse()
                {
                    Status = APIStatus.Success
                });
            }
            catch
            {
                return Ok(new APIBaseResponse
                {
                    Status = APIStatus.Fail,
                    ErrorMsg = "傳遞資料發生錯誤"
                });
            }
         

        }
    }
}
